//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StatsToday_Service
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class shortenurlEntities : DbContext
    {
        public shortenurlEntities()
            : base("name=shortenurlEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<batchuploaddata> batchuploaddatas { get; set; }
        public virtual DbSet<campaignhookurl> campaignhookurls { get; set; }
        public virtual DbSet<city_blocks_ipv4_geolite2> city_blocks_ipv4_geolite2 { get; set; }
        public virtual DbSet<city_locations_geolite2> city_locations_geolite2 { get; set; }
        public virtual DbSet<client> clients { get; set; }
        public virtual DbSet<cookietable> cookietables { get; set; }
        public virtual DbSet<errorlog> errorlogs { get; set; }
        public virtual DbSet<excluded_shorturl> excluded_shorturl { get; set; }
        public virtual DbSet<freegeoipdata> freegeoipdatas { get; set; }
        public virtual DbSet<hashidlist> hashidlists { get; set; }
        public virtual DbSet<hitnotify> hitnotifies { get; set; }
        public virtual DbSet<locations_data> locations_data { get; set; }
        public virtual DbSet<loginhistory> loginhistories { get; set; }
        public virtual DbSet<master_location> master_location { get; set; }
        public virtual DbSet<messagelink> messagelinks { get; set; }
        public virtual DbSet<riddata> riddatas { get; set; }
        public virtual DbSet<shorturlclickreference> shorturlclickreferences { get; set; }
        public virtual DbSet<shorturldata> shorturldatas { get; set; }
        public virtual DbSet<stat_counts> stat_counts { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tmp_rownum_update> tmp_rownum_update { get; set; }
        public virtual DbSet<uiddata> uiddatas { get; set; }
    
        public virtual int InsertRIDData(string campaignName, string referencenumber, string pwd, Nullable<int> clientid)
        {
            var campaignNameParameter = campaignName != null ?
                new ObjectParameter("CampaignName", campaignName) :
                new ObjectParameter("CampaignName", typeof(string));
    
            var referencenumberParameter = referencenumber != null ?
                new ObjectParameter("referencenumber", referencenumber) :
                new ObjectParameter("referencenumber", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRIDData", campaignNameParameter, referencenumberParameter, pwdParameter, clientidParameter);
        }
    
        public virtual int InsertSHORTURLData(string ipv4, string ipv6, string browser, string browser_version, string latitude, string longitude, Nullable<long> ipnum, string req_url, string useragent, string hostname, string isMobiledevice, Nullable<int> fk_uid, Nullable<int> fk_rid, Nullable<int> fK_clientid, string cookievalue, string mobilenumber, Nullable<sbyte> hitnotify, Nullable<int> pK_HookId, string headerValues, string iPHeaderType)
        {
            var ipv4Parameter = ipv4 != null ?
                new ObjectParameter("ipv4", ipv4) :
                new ObjectParameter("ipv4", typeof(string));
    
            var ipv6Parameter = ipv6 != null ?
                new ObjectParameter("ipv6", ipv6) :
                new ObjectParameter("ipv6", typeof(string));
    
            var browserParameter = browser != null ?
                new ObjectParameter("browser", browser) :
                new ObjectParameter("browser", typeof(string));
    
            var browser_versionParameter = browser_version != null ?
                new ObjectParameter("browser_version", browser_version) :
                new ObjectParameter("browser_version", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var ipnumParameter = ipnum.HasValue ?
                new ObjectParameter("ipnum", ipnum) :
                new ObjectParameter("ipnum", typeof(long));
    
            var req_urlParameter = req_url != null ?
                new ObjectParameter("req_url", req_url) :
                new ObjectParameter("req_url", typeof(string));
    
            var useragentParameter = useragent != null ?
                new ObjectParameter("useragent", useragent) :
                new ObjectParameter("useragent", typeof(string));
    
            var hostnameParameter = hostname != null ?
                new ObjectParameter("hostname", hostname) :
                new ObjectParameter("hostname", typeof(string));
    
            var isMobiledeviceParameter = isMobiledevice != null ?
                new ObjectParameter("IsMobiledevice", isMobiledevice) :
                new ObjectParameter("IsMobiledevice", typeof(string));
    
            var fk_uidParameter = fk_uid.HasValue ?
                new ObjectParameter("fk_uid", fk_uid) :
                new ObjectParameter("fk_uid", typeof(int));
    
            var fk_ridParameter = fk_rid.HasValue ?
                new ObjectParameter("fk_rid", fk_rid) :
                new ObjectParameter("fk_rid", typeof(int));
    
            var fK_clientidParameter = fK_clientid.HasValue ?
                new ObjectParameter("FK_clientid", fK_clientid) :
                new ObjectParameter("FK_clientid", typeof(int));
    
            var cookievalueParameter = cookievalue != null ?
                new ObjectParameter("cookievalue", cookievalue) :
                new ObjectParameter("cookievalue", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("mobilenumber", mobilenumber) :
                new ObjectParameter("mobilenumber", typeof(string));
    
            var hitnotifyParameter = hitnotify.HasValue ?
                new ObjectParameter("hitnotify", hitnotify) :
                new ObjectParameter("hitnotify", typeof(sbyte));
    
            var pK_HookIdParameter = pK_HookId.HasValue ?
                new ObjectParameter("PK_HookId", pK_HookId) :
                new ObjectParameter("PK_HookId", typeof(int));
    
            var headerValuesParameter = headerValues != null ?
                new ObjectParameter("HeaderValues", headerValues) :
                new ObjectParameter("HeaderValues", typeof(string));
    
            var iPHeaderTypeParameter = iPHeaderType != null ?
                new ObjectParameter("IPHeaderType", iPHeaderType) :
                new ObjectParameter("IPHeaderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSHORTURLData", ipv4Parameter, ipv6Parameter, browserParameter, browser_versionParameter, latitudeParameter, longitudeParameter, ipnumParameter, req_urlParameter, useragentParameter, hostnameParameter, isMobiledeviceParameter, fk_uidParameter, fk_ridParameter, fK_clientidParameter, cookievalueParameter, mobilenumberParameter, hitnotifyParameter, pK_HookIdParameter, headerValuesParameter, iPHeaderTypeParameter);
        }
    
        public virtual int InsertUIDData(Nullable<int> fk_rid, Nullable<int> fk_clientid, string referencenumber, string longurl, string mobilenumber)
        {
            var fk_ridParameter = fk_rid.HasValue ?
                new ObjectParameter("fk_rid", fk_rid) :
                new ObjectParameter("fk_rid", typeof(int));
    
            var fk_clientidParameter = fk_clientid.HasValue ?
                new ObjectParameter("fk_clientid", fk_clientid) :
                new ObjectParameter("fk_clientid", typeof(int));
    
            var referencenumberParameter = referencenumber != null ?
                new ObjectParameter("referencenumber", referencenumber) :
                new ObjectParameter("referencenumber", typeof(string));
    
            var longurlParameter = longurl != null ?
                new ObjectParameter("longurl", longurl) :
                new ObjectParameter("longurl", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("mobilenumber", mobilenumber) :
                new ObjectParameter("mobilenumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUIDData", fk_ridParameter, fk_clientidParameter, referencenumberParameter, longurlParameter, mobilenumberParameter);
        }
    
        public virtual int spDelete_Campaign(Nullable<int> fKRID)
        {
            var fKRIDParameter = fKRID.HasValue ?
                new ObjectParameter("FKRID", fKRID) :
                new ObjectParameter("FKRID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelete_Campaign", fKRIDParameter);
        }
    
        public virtual int spGetALLCOUNTS1(string dateFrom, string dateTo, Nullable<int> rid)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetALLCOUNTS1", dateFromParameter, dateToParameter, ridParameter);
        }
    
        public virtual ObjectResult<spGetUIDDATA_Result> spGetUIDDATA(string unique_number)
        {
            var unique_numberParameter = unique_number != null ?
                new ObjectParameter("unique_number", unique_number) :
                new ObjectParameter("unique_number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUIDDATA_Result>("spGetUIDDATA", unique_numberParameter);
        }
    }
}
